diff -uNr a/coreutils/date.c b/coreutils/date.c
--- a/coreutils/date.c	2020-06-02 19:26:01.184957000 +0800
+++ b/coreutils/date.c	2020-06-14 22:22:48.025673397 +0800
@@ -271,12 +271,8 @@
 		 */
 #endif
 	} else {
-#if ENABLE_FEATURE_DATE_NANO
-		/* libc has incredibly messy way of doing this,
-		 * typically requiring -lrt. We just skip all this mess */
-		syscall(__NR_clock_gettime, CLOCK_REALTIME, &ts);
-#else
-		time(&ts.tv_sec);
+#if !ENABLE_FEATURE_DATE_NANO
+	ts.tv_nsec = 0;
 #endif
 	}
 	localtime_r(&ts.tv_sec, &tm_time);
@@ -301,9 +297,10 @@
 		if (date_str[0] != '@')
 			tm_time.tm_isdst = -1;
 		ts.tv_sec = validate_tm_time(date_str, &tm_time);
+		ts.tv_nsec = 0;
 
 		/* if setting time, set it */
-		if ((opt & OPT_SET) && stime(&ts.tv_sec) < 0) {
+		if ((opt & OPT_SET) && clock_settime(CLOCK_REALTIME, &ts) < 0) {
 			bb_perror_msg("can't set date");
 		}
 	}
diff -uNr a/libbb/missing_syscalls.c b/libbb/missing_syscalls.c
--- a/libbb/missing_syscalls.c	2020-06-02 19:26:01.204700000 +0800
+++ b/libbb/missing_syscalls.c	2020-06-14 22:24:23.872411143 +0800
@@ -15,14 +15,6 @@
 	return syscall(__NR_getsid, pid);
 }
 
-int stime(const time_t *t)
-{
-	struct timeval tv;
-	tv.tv_sec = *t;
-	tv.tv_usec = 0;
-	return settimeofday(&tv, NULL);
-}
-
 int sethostname(const char *name, size_t len)
 {
 	return syscall(__NR_sethostname, name, len);
diff -uNr a/util-linux/rdate.c b/util-linux/rdate.c
--- a/util-linux/rdate.c	2020-06-02 19:26:01.259982000 +0800
+++ b/util-linux/rdate.c	2020-06-14 22:27:02.774407619 +0800
@@ -95,9 +95,13 @@
 	if (!(flags & 2)) { /* no -p (-s may be present) */
 		if (time(NULL) == remote_time)
 			bb_error_msg("current time matches remote time");
-		else
-			if (stime(&remote_time) < 0)
+		else {
+			struct timespec ts;
+			ts.tv_sec = remote_time;
+			ts.tv_nsec = 0;
+			if (clock_settime(CLOCK_REALTIME, &ts) < 0)
 				bb_perror_msg_and_die("can't set time of day");
+		}
 	}
 
 	if (flags != 1) /* not lone -s */
